use std::{collections::HashSet, hash::Hash, ops::Add, thread::sleep_ms, time::Duration};

const _input: &str = "R 5
U 8
L 8
D 3
R 17
D 10
L 25
U 20";

const input: &str = "U 1
R 1
D 2
L 1
R 2
U 1
L 1
U 1
L 2
R 1
D 2
U 1
R 2
L 2
U 2
R 2
D 2
R 1
D 2
L 2
R 2
U 1
D 2
L 1
U 2
D 2
L 1
D 2
R 1
D 1
R 2
L 2
D 1
R 2
U 1
L 1
D 2
R 2
U 2
L 2
D 2
R 1
L 1
U 1
R 2
U 1
L 2
R 1
U 1
R 2
D 1
R 1
D 1
L 2
U 2
L 2
U 2
L 1
R 2
L 2
R 2
L 1
D 2
U 1
R 2
D 1
R 2
D 1
R 2
D 2
U 1
L 1
D 2
R 2
L 2
R 2
L 2
U 1
L 2
R 2
D 2
L 1
D 1
L 1
U 1
D 1
U 2
L 1
D 2
L 2
U 1
R 1
L 2
U 1
R 2
U 2
R 2
D 2
U 1
L 2
D 2
U 2
D 1
U 2
L 2
U 1
L 2
R 1
U 1
L 1
R 2
U 1
R 3
D 3
L 2
D 2
R 1
D 3
R 3
D 1
U 2
R 1
D 3
R 1
L 3
D 1
R 3
L 3
R 2
L 2
U 3
R 2
D 2
L 2
D 1
R 2
L 3
D 1
R 1
U 1
D 3
U 2
L 2
R 3
U 3
L 2
D 1
L 2
R 1
L 2
R 2
D 2
R 3
L 3
D 2
L 3
D 2
L 3
D 2
R 1
L 3
U 3
R 1
L 2
D 3
U 1
D 2
L 3
D 3
R 1
D 1
U 3
L 3
U 2
R 1
D 2
L 1
R 3
L 1
D 2
U 1
R 3
L 3
D 3
U 1
L 3
R 1
L 3
D 3
U 2
R 3
D 1
L 1
D 2
L 1
U 1
D 2
L 2
D 1
U 3
D 1
U 2
L 2
D 1
U 2
L 2
U 3
R 2
L 1
U 1
D 1
L 2
D 1
U 2
D 3
U 3
R 1
L 3
R 3
L 2
U 3
R 3
U 3
R 2
U 1
R 3
U 3
R 1
U 4
D 3
R 2
L 3
R 3
L 4
R 2
L 1
U 2
D 4
U 4
D 3
L 2
U 3
R 3
U 4
R 4
D 3
U 4
R 3
U 4
L 4
D 4
R 4
U 2
L 3
D 4
L 1
U 2
R 1
D 3
U 1
R 1
U 3
D 2
L 3
D 2
U 4
D 4
L 3
U 4
R 1
D 3
L 3
D 2
L 1
R 1
U 1
D 2
L 2
U 4
D 1
R 3
L 2
R 2
L 3
U 4
D 1
R 4
L 1
U 4
D 2
U 3
R 2
U 1
D 2
U 2
R 1
L 1
U 4
L 1
R 4
U 2
L 2
D 3
R 2
U 1
D 4
L 3
D 2
U 3
D 3
L 1
U 4
L 3
R 2
L 4
R 3
D 2
U 3
R 1
D 4
L 2
D 3
R 2
U 3
R 2
U 2
L 3
D 1
R 4
L 1
R 1
D 2
R 1
D 5
L 4
U 2
D 5
R 4
L 2
U 4
D 5
L 3
U 1
R 2
D 1
R 4
U 5
L 2
D 2
R 4
D 2
R 5
L 5
D 3
U 1
R 2
D 1
U 1
D 2
U 5
D 2
U 5
R 4
L 2
U 4
D 1
U 1
L 4
U 4
D 1
U 5
D 4
L 3
D 2
U 3
R 4
D 2
L 3
R 4
D 1
U 2
L 2
R 1
D 3
R 5
U 1
R 4
U 1
R 3
U 5
L 5
D 4
L 5
R 2
D 3
R 4
D 2
U 4
D 3
U 1
L 2
U 3
L 2
R 1
U 5
D 2
R 1
D 3
R 1
U 2
R 1
U 2
L 3
R 1
L 3
U 1
D 4
R 5
L 3
D 1
U 4
D 1
U 1
R 3
D 5
R 3
D 3
U 2
L 4
R 3
L 5
U 3
L 2
D 1
U 5
R 3
U 5
R 3
L 1
U 3
L 4
R 1
D 2
L 2
U 5
D 3
L 3
U 6
R 3
L 4
D 4
R 3
D 5
R 3
U 6
D 1
L 5
D 5
L 2
U 1
R 2
L 4
U 5
R 4
L 6
U 2
D 3
L 5
D 2
R 3
L 5
R 4
D 6
R 6
L 3
U 5
R 3
L 2
R 1
D 6
R 1
L 1
R 1
U 5
R 1
D 1
R 5
L 1
R 6
L 1
R 3
U 2
D 3
U 4
D 4
R 5
U 4
D 2
R 1
D 6
R 3
D 1
R 3
U 2
R 3
U 2
D 3
U 2
R 1
L 4
D 4
L 3
D 2
U 3
L 6
D 6
R 5
U 3
L 4
R 6
D 3
R 1
U 4
D 1
L 3
U 5
D 2
L 2
U 5
L 3
U 6
D 5
L 1
U 4
L 6
D 6
U 3
D 2
R 6
D 4
R 1
U 5
R 5
U 2
R 5
D 4
R 2
U 2
L 3
D 3
R 5
D 3
U 1
L 1
U 6
D 5
R 2
L 4
D 1
R 6
L 4
D 2
L 7
U 7
L 1
D 4
U 3
D 7
L 6
R 5
D 7
R 4
L 6
U 3
D 7
U 6
D 2
U 2
L 5
D 3
U 1
L 1
U 7
D 7
L 1
R 1
D 6
R 7
L 7
D 3
L 6
R 7
U 4
D 7
R 6
L 2
R 1
U 1
D 1
R 3
U 1
L 5
R 7
L 4
R 5
L 2
R 3
L 7
D 5
L 3
R 4
U 1
R 7
D 4
R 3
U 1
D 1
L 1
D 4
R 4
L 2
D 3
U 4
R 5
D 6
U 4
L 7
R 6
L 7
U 3
D 7
R 4
U 7
R 5
U 2
L 5
R 7
L 5
U 3
L 7
U 6
D 7
R 7
D 6
U 1
R 1
D 6
U 3
L 7
D 1
R 1
D 2
L 2
R 2
U 5
L 2
U 1
R 5
U 5
L 3
R 6
D 1
L 7
D 7
R 1
L 1
R 1
U 5
R 1
L 8
D 6
R 6
U 2
L 7
U 3
L 4
R 3
D 3
R 8
U 6
R 3
D 4
U 8
R 5
U 3
R 3
D 2
R 4
U 6
R 2
D 2
L 2
D 7
U 4
L 3
R 4
L 8
R 1
U 2
D 1
L 8
U 8
R 6
U 1
L 8
D 6
L 7
U 5
L 3
D 1
R 2
L 8
R 7
D 7
R 7
D 7
R 8
U 5
R 4
U 3
D 5
U 3
L 8
D 2
L 2
D 4
R 2
D 7
R 4
U 8
R 1
L 2
D 7
U 1
L 3
R 1
L 8
D 1
R 7
U 2
L 2
R 8
D 8
U 7
R 1
U 7
L 1
R 1
L 3
U 7
R 3
D 4
R 3
D 4
R 3
U 7
L 4
R 7
L 1
D 8
R 7
U 6
R 4
D 2
R 7
L 8
D 6
R 1
U 8
L 6
D 4
L 4
U 8
R 3
D 4
U 4
L 5
U 9
L 5
R 1
L 1
U 7
L 7
U 3
D 4
L 4
U 3
D 7
R 3
D 6
R 2
U 8
D 7
U 1
D 1
L 8
R 6
L 4
D 2
L 7
D 9
R 6
D 8
R 4
D 9
L 4
D 3
L 4
U 6
L 2
U 3
D 4
R 9
D 5
L 5
U 3
R 9
U 9
D 3
R 1
D 7
R 1
D 8
R 1
D 3
R 6
L 5
D 1
L 3
R 3
U 1
D 4
U 6
D 9
U 9
L 6
D 6
R 1
U 4
D 6
L 7
R 1
L 8
R 8
D 1
R 6
L 7
D 3
U 8
R 8
L 9
R 8
L 7
U 5
L 2
R 4
D 8
U 9
D 3
L 6
U 3
L 2
R 1
D 3
U 9
D 9
U 6
R 8
L 1
U 8
L 5
R 2
L 4
R 6
L 6
D 4
R 6
L 9
R 8
U 1
D 8
R 7
D 1
L 9
D 6
L 1
R 7
D 9
R 8
L 6
U 7
R 1
D 7
U 9
R 10
D 10
U 7
D 5
R 9
U 6
L 8
R 4
D 5
R 10
U 7
D 10
R 5
L 9
R 3
U 9
R 9
D 4
L 2
R 4
D 1
L 6
R 9
L 1
D 2
R 8
D 1
R 10
D 4
L 2
D 5
L 3
U 5
L 8
R 2
L 6
U 5
D 3
L 2
R 2
L 9
R 1
L 9
U 10
D 7
U 6
R 3
L 9
U 7
L 9
U 2
L 3
D 10
U 1
L 9
U 8
D 5
U 5
D 1
L 9
D 3
U 9
L 3
R 3
D 2
R 5
D 7
U 4
R 3
U 1
R 8
U 1
D 2
R 3
D 4
U 5
R 10
U 6
D 1
L 7
D 4
L 6
R 6
U 2
L 3
D 2
L 3
D 7
R 1
D 4
L 9
R 9
D 1
L 9
U 3
R 9
L 6
U 6
D 1
U 10
L 2
D 4
R 8
U 2
R 4
D 2
R 4
L 9
R 7
D 10
R 10
L 8
D 11
U 6
L 8
D 7
U 8
L 5
R 9
L 1
U 1
D 6
R 10
U 11
L 9
U 4
L 5
R 6
D 11
U 9
R 4
D 11
R 4
D 3
L 7
R 9
D 1
R 3
U 11
L 5
D 1
U 7
R 8
U 4
D 10
U 4
R 9
U 7
L 6
U 8
L 6
U 2
R 7
L 3
U 5
D 9
R 3
D 6
U 6
L 7
D 11
U 1
D 11
U 9
R 10
L 11
R 4
D 10
R 6
L 4
D 11
L 7
R 2
L 6
U 9
D 2
R 4
D 11
L 4
D 9
U 11
L 7
R 2
D 2
U 6
L 4
R 4
U 10
L 3
R 7
U 10
L 3
U 3
D 6
U 11
D 1
R 6
U 7
L 3
D 6
L 3
D 7
R 8
U 4
R 5
D 8
L 11
D 11
R 8
D 5
L 1
U 4
D 1
R 6
D 9
L 9
D 9
U 6
D 6
R 6
D 6
U 1
L 5
D 10
U 4
L 6
D 3
L 12
R 11
D 7
R 12
U 9
R 8
D 1
U 9
D 2
L 4
U 10
D 7
L 8
U 5
D 7
R 4
U 4
R 11
U 11
D 1
L 5
R 2
L 9
D 11
L 9
R 9
U 1
R 4
U 4
L 10
R 1
D 8
U 1
D 2
U 6
D 1
R 6
L 10
U 5
D 11
U 11
L 9
D 1
R 5
D 3
L 2
R 8
U 8
R 5
L 2
U 12
L 9
R 9
D 1
U 3
D 4
R 1
D 11
L 4
U 7
D 11
U 6
L 2
R 3
U 8
L 9
D 9
L 12
R 1
L 3
R 2
L 3
D 5
R 9
U 9
R 8
D 10
U 9
R 6
L 9
D 8
U 11
R 3
L 7
D 10
R 9
D 7
R 11
D 5
U 2
L 10
R 1
U 10
D 5
R 5
L 4
R 9
D 4
R 3
L 9
D 9
L 5
R 4
L 12
R 7
U 13
D 6
U 9
D 13
U 5
R 11
D 6
R 13
U 2
R 10
D 2
L 11
R 9
D 12
L 4
D 11
L 1
D 5
L 3
D 5
U 11
R 8
L 2
D 13
L 1
R 6
D 4
U 8
D 8
R 5
D 1
U 7
R 13
U 13
D 2
L 4
U 1
R 5
L 13
U 2
L 7
D 12
U 10
D 13
L 8
R 5
L 13
U 5
D 6
L 11
D 10
R 1
U 7
R 6
D 12
L 6
D 2
U 9
D 10
L 7
D 2
U 3
R 3
L 9
D 1
R 5
U 10
L 3
R 3
U 4
L 13
R 4
D 13
R 8
L 10
U 7
R 9
L 4
U 5
R 4
D 2
L 12
R 11
L 10
U 13
L 2
U 11
L 11
R 6
D 4
L 7
R 11
L 12
D 13
U 4
L 11
R 7
D 12
L 7
R 7
D 10
U 11
L 12
U 5
R 8
U 7
L 9
R 2
U 7
L 12
D 6
U 4
R 12
D 2
R 8
U 14
L 2
R 1
U 2
R 8
U 4
D 14
U 13
R 7
D 5
R 6
U 9
L 12
U 11
L 7
R 1
U 2
D 8
R 4
D 2
R 11
L 8
R 6
D 10
L 3
R 12
D 6
R 10
L 4
D 14
U 9
L 3
D 3
L 12
D 14
R 14
D 12
U 4
L 10
R 13
U 4
D 9
L 11
R 1
U 13
D 5
U 2
D 6
U 8
R 12
U 3
D 4
L 8
D 7
R 9
L 6
D 13
L 10
D 4
R 13
D 14
U 5
D 7
U 14
L 14
R 7
L 2
D 6
R 9
U 14
L 10
D 14
L 10
D 8
R 5
L 3
U 3
D 9
R 1
L 8
R 9
D 9
R 12
U 10
R 14
L 9
U 9
R 14
L 14
R 6
D 5
R 6
U 11
D 8
U 8
D 5
L 7
D 2
U 14
R 1
L 9
R 6
U 13
R 15
U 15
D 8
U 7
D 3
L 10
U 11
D 9
R 14
D 1
L 2
U 3
R 7
L 4
D 2
L 12
D 11
L 6
U 9
D 9
L 3
R 1
D 12
L 8
U 4
L 2
U 9
R 12
L 14
U 6
D 4
U 10
R 4
U 7
D 4
R 10
U 11
R 11
L 4
U 3
D 2
L 9
D 1
L 15
R 2
D 3
R 5
U 6
D 12
R 2
U 6
D 6
L 9
U 8
R 10
U 10
R 3
U 1
R 14
U 2
L 13
D 10
U 2
D 6
U 5
L 15
R 4
U 6
R 9
U 10
L 9
R 13
L 9
R 13
D 8
U 15
L 11
R 2
U 2
D 15
R 14
D 2
L 15
D 14
R 4
D 13
R 9
L 5
D 1
U 4
D 13
L 9
D 14
U 2
D 8
L 13
U 2
D 10
U 5
L 3
R 2
L 1
U 5
L 3
D 7
U 3
D 7
R 2
L 1
D 5
U 8
D 11
L 10
U 12
D 9
U 5
D 9
U 15
R 9
D 13
R 2
D 5
U 4
L 8
R 2
U 1
R 6
U 6
D 9
U 8
L 8
D 7
U 14
D 3
R 8
D 3
U 10
D 2
R 15
U 8
L 8
D 10
L 7
D 7
L 2
U 7
D 13
L 11
D 16
L 15
U 16
L 12
U 14
R 4
U 1
R 10
U 5
L 2
U 6
L 9
R 8
L 16
D 11
R 1
L 7
D 10
U 9
R 3
D 13
R 15
L 9
D 13
R 11
L 1
D 16
L 2
R 9
L 4
R 14
L 1
D 14
R 5
L 1
D 11
U 8
D 12
R 13
U 8
L 4
U 11
R 7
D 4
R 15
U 6
L 2
D 11
L 13
R 16
U 13
D 16
U 4
R 10
D 2
R 8
D 3
R 15
U 9
L 1
U 10
L 13
D 5
L 1
D 14
U 6
L 14
D 8
U 10
R 5
L 8
U 9
D 2
R 6
U 17
L 6
U 9
L 4
R 14
D 1
L 7
U 1
R 11
D 3
R 8
D 5
R 11
U 3
L 12
U 5
R 12
D 7
R 12
L 7
U 11
D 17
L 12
R 15
D 16
R 6
D 16
L 3
U 17
L 3
D 4
L 12
R 10
L 3
D 14
L 5
R 2
U 1
D 8
R 4
D 9
L 8
R 15
L 16
U 5
R 3
U 3
D 15
R 2
D 8
R 17
D 11
U 8
R 1
L 7
D 14
U 14
L 9
R 8
D 2
L 14
D 5
R 10
L 12
U 5
L 7
U 11
L 14
R 17
D 14
R 1
L 1
U 15
D 13
R 15
L 17
D 3
R 1
L 2
R 3
U 16
D 8
U 9
R 8
L 7
R 11
U 9
D 6
U 11
D 4
U 11
D 16
R 6
D 15
U 11
L 3
U 12
D 10
U 14
R 4
D 9
R 6
U 2
R 10
L 1
R 3
D 5
L 5
D 17
U 11
L 17
R 4
U 3
L 15
R 3
L 3
R 16
L 12
R 6
L 2
D 5
L 17
U 17
R 1
D 6
L 9
D 6
R 15
D 9
R 4
L 6
U 15
L 16
R 10
D 11
U 8
D 7
U 1
R 7
L 16
U 5
D 14
R 16
D 6
R 2
L 2
R 3
L 8
D 4
U 11
R 9
U 5
D 11
U 3
R 9
L 5
D 14
U 1
D 11
L 6
U 16
L 17
U 7
L 13
R 13
U 11
L 10
D 2
R 7
D 16
R 9
U 17
L 13
U 17
L 4
D 7
U 16
D 8
L 7
R 16
L 11
D 9
R 18
U 1
D 12
R 16
L 8
D 7
U 10
L 9
U 6
R 5
D 5
R 8
D 7
L 9
R 8
L 11
R 3
D 6
L 6
D 18
U 14
D 11
U 13
R 10
L 2
R 6
L 13
R 1
U 6
R 8
D 10
L 8
R 15
U 4
L 7
R 17
L 8
R 3
D 6
L 13
R 10
D 1
R 5
D 11
U 10
D 4
L 5
R 13
D 2
L 14
D 8
U 5
R 10
L 17
D 2
U 4
R 1
L 10
R 2
L 9
D 2
L 4
R 4
U 9
L 7
U 3
D 1
L 9
U 1
D 18
U 14
L 7
R 3
D 12
L 19
R 13
D 16
U 18
D 16
R 2
D 11
U 16
R 1
D 17
U 8
D 1
U 17
L 4
D 16
L 8
U 3
R 13
U 1
D 1
U 1
R 17
U 14
R 17
D 16
U 8
L 6
D 9
R 1
D 9
L 2
D 14
R 1
L 9
U 5
D 1
R 15
L 14
U 4
R 15
U 9
D 10
L 5
R 1
L 14
U 7
R 8
L 8
R 14
L 7
D 14
L 17
R 2
U 13
R 13
L 3
R 18
L 6
D 9
U 5
R 14
U 11
D 13
L 15
D 1
U 10
R 13
D 6
U 15
D 15
R 5
U 15
D 2
U 2
D 10
L 19
R 8
D 3";

const EOL: &str = "
";

fn main() {
    // let directions = vec!["R", "U", "R", "R"];

    let mut visited_positions: HashSet<(i32, i32)> = HashSet::new();
    let mut maxX = 0;
    let mut maxY = 0;
    let mut minX = 0;
    let mut minY = 0;

    let directions = input
        .split(EOL)
        .into_iter()
        .map(|line| {
            let split: Vec<&str> = line.split(" ").collect();
            let d = split[0];
            let n = split[1].parse::<i32>().unwrap_or(1) as usize;
            vec![d; n]
        })
        .flatten()
        .collect::<Vec<&str>>();

    let mut head = vec![0, 0];
    // let mut tail = vec![0, 0];
    let mut rope = vec![vec![0, 0]; 9];

    for dir in directions.into_iter() {
        let tail = rope.last();
        _ = match tail {
            Some(tail) => visited_positions.insert((tail[0], tail[1])),
            _ => false,
        };

        match dir {
            "R" => head[0] += 1,
            "U" => head[1] += 1,
            "L" => head[0] -= 1,
            "D" => head[1] -= 1,
            _ => {}
        }
        println!("Head now at {:?}", head);

        // for (i, knot) in rope.iter_mut().enumerate() {
        //     let prevKnot = if i == 0 { &head } else { &rope[i - 1] };
        for i in 0..rope.len() {
            let knot = &rope[i];
            let prevKnot = if i == 0 { &head } else { &rope[i - 1] };
            // Check tail
            let max_dist = vec![0, 1]
                .into_iter()
                .map(|x: usize| knot[x] - prevKnot[x])
                .map(|x: i32| x.abs())
                .max()
                .unwrap_or_default();
            // println!("Distance, {}", max_dist);
            if max_dist > 1 {
                //    Move tail
                // println!("Tail incorrect");

                let dir = prevKnot
                    .iter()
                    .zip(knot.iter())
                    .map(|(head, tail)| head - tail)
                    .map(clamp_to_one);

                // println!( "Direction towards head {:?}", dir.clone().collect::<Vec<i32>>());
                let newTail: Vec<i32> =
                    knot.iter().zip(dir).map(|(tail, dir)| tail + dir).collect();
                // println!("Tail moved from {:?} to {:?}", tail, newTail);
                // *knot = newTail;

                minX = min(prevKnot[0], knot[0], minX);
                minY = min(prevKnot[1], knot[1], minY);
                maxX = max(prevKnot[0], knot[0], maxX);
                maxY = max(prevKnot[1], knot[1], maxY);
                rope[i] = newTail;
            }
        }
        // println!("Min max values, {}, {}, {}, {}", minX, minY, maxX, maxY);
        // print!("{}[2J", 27 as char);

        //     std::thread::sleep(Duration::from_millis(10));
        //     for y in (minY - 1..maxY + 2).rev() {
        //         let mut str = String::new();
        //         for x in minX - 1..maxX + 2 {
        //             let mut char = ".".to_string();
        //             if visited_positions.contains(&(x, y)) {
        //                 char = "#".to_string();
        //             }
        //             for (i, tail) in rope.iter().enumerate() {
        //                 if tail[0] == x && tail[1] == y {
        //                     char = i.to_string();
        //                 }
        //             }
        //             if head[0] == x && head[1] == y {
        //                 char = "H".to_string();
        //             }
        //             str += &char;
        //         }
        //         println!("{}", str);
        //     }
        //     println!("Rope: {:?}", rope);
    }

    println!("Lengt, {}", visited_positions.len() + 1);
}

fn max(a: i32, b: i32, c: i32) -> i32 {
    return std::cmp::max(a, std::cmp::max(b, c));
}

fn min(a: i32, b: i32, c: i32) -> i32 {
    return std::cmp::min(a, std::cmp::min(b, c));
}

fn clamp_to_one(num: i32) -> i32 {
    if num == 0 {
        return 0;
    }
    let abs = num.abs();
    num / abs
}
